{"version":3,"sources":["Nav.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","search","react_default","a","createElement","className","href","type","placeholder","onChange","event","Card","project","concat","url","key","target","rel","title","blurb","by","location","replace","country","slice","style","marginTop","currency","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSearch","setState","value","state","projects","loading","_this2","axios","get","then","data","sort","b","localeCompare","fetchData","_this$state","react_epic_spinners_umd","color","map","includes","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f6c382ce.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Nav(props) {\n    const { search } = props\n    return(\n        <nav className=\"navbar navbar-default\">\n            <div className=\"container\">\n                <div className=\"navbar-header\">\n                    <a className=\"navbar-brand\" href=\"#S\">StarterHunt</a>\n                </div>\n                <form className=\"navbar-form navbar-left\">\n                    <div className=\"form-group\">\n                        <input\n                         type=\"text\" \n                         className=\"form-control\" \n                         placeholder=\"Search for projects\" \n                         onChange={(event) => search(event)}\n                        />\n                    </div>\n                </form>\n            </div>\n        </nav>\n    )\n}","import React from 'react'\n\nexport default function Card(props){\n    const { project } = props\n    return (\n        <a\n         href={`https://kickstarter.com${project.url}`} \n         key={project['s.no']} \n         className=\"thumbnail\"\n         target=\"_blank\"\n         rel=\"noopener noreferrer\"\n        >\n            <h1>{project.title}</h1>\n            <p>{project.blurb}</p>\n            <small><i className=\"fas fa-user\"></i> {project.by} \n                &nbsp; <i className=\"fas fa-map-marker\"></i> {project.location.replace(' ','')},&nbsp;{project.country}\n                &nbsp; <i className=\"fas fa-calendar-alt\"></i> {project['end.time'].slice(0,10)}\n            </small>\n            <p style={{marginTop:'5px'}}><strong>Amount pledged:</strong> {project.currency === 'usd'\n             ? <i className=\"fas fa-dollar-sign\"></i>\n             : (project.currency === 'eur' ? <i className=\"fas fa-euro-sign\"></i> : <i className=\"fas fa-pound-sign\"></i>)\n            } {project['amt.pledged']} by {project['num.backers']} backers</p>\n        </a> \n    )\n}","import React, { Component } from 'react';\nimport axios from 'axios'\nimport { PixelSpinner } from 'react-epic-spinners'\nimport Nav from './Nav'\nimport Card from './Card'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      projects: [],\n      loading: true,\n      search: ''\n    }\n  }\n\n  fetchData(){\n    axios.get('https://raw.githubusercontent.com/AdithyaBhat17/starterhunt/master/_data.json')\n    .then((data) => {\n      data.data.sort(((a,b) => b['end.time'].localeCompare(a['end.time'])))\n      this.setState({\n        projects: data.data,\n        loading: false\n      })\n    })\n  }\n\n  componentDidMount(){\n    this.fetchData()\n  }\n\n  handleSearch = (event) => {\n    this.setState({\n      search: event.target.value\n    })\n  }\n\n  render() {\n    const { loading, projects, search } = this.state\n    if(loading === true) return <PixelSpinner className=\"spinner\" color=\"#444\"/>\n    if(search !== ''){\n      return (\n        <div>\n          <Nav search={this.handleSearch}/>\n          <div className=\"container\">\n            {projects.map(project => project.title.includes(search) && (<Card project={project} key={project['s.no']} />))}\n          </div>\n        </div>\n      )      \n    } \n    \n    return (\n      <div>\n        <Nav search={this.handleSearch}/>\n        <div className=\"container\">\n          {projects && projects.map(project => (\n            <Card project={project} key={project['s.no']}/>\n          ))}        \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'circular-std'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}